{"ast":null,"code":"var _jsxFileName = \"/Users/rohitsingh/Desktop/JOBS/Essentially AI/frontend/src/card.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketComponent = () => {\n  _s();\n  const [id, setId] = useState('');\n  const [randomNumbers, setRandomNumbers] = useState('');\n  const [firstResponseReceived, setFirstResponseReceived] = useState(false);\n  useEffect(() => {\n    const socket = new WebSocket('ws://localhost:3000');\n\n    // Event listener for when the connection is established\n    socket.addEventListener('open', event => {\n      console.log('WebSocket connection opened:', event);\n    });\n\n    // Event listener for incoming messages\n    socket.addEventListener('message', event => {\n      const data = JSON.parse(event.data);\n      console.log(data);\n      // Perform your action when the first response is received\n      if (!firstResponseReceived) {\n        console.log('First response received taking in the id ');\n        setId(data.id);\n        setFirstResponseReceived(true);\n      }\n      setRandomNumbers(data.value);\n    });\n\n    // Event listener for when the connection is closed\n    socket.addEventListener('close', event => {\n      console.log('WebSocket connection closed:', event);\n    });\n\n    // Cleanup function to close the socket when the component is unmounted\n    return () => {\n      socket.close();\n    };\n  }, []); // Empty dependency array ensures this effect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: `${id}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `${randomNumbers}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(WebSocketComponent, \"snpS5HegYiscRnajXCYYAWJMLfs=\");\n_c = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c;\n$RefreshReg$(_c, \"WebSocketComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WebSocketComponent","_s","id","setId","randomNumbers","setRandomNumbers","firstResponseReceived","setFirstResponseReceived","socket","WebSocket","addEventListener","event","console","log","data","JSON","parse","value","close","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rohitsingh/Desktop/JOBS/Essentially AI/frontend/src/card.jsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\n\nconst WebSocketComponent = () => {\n\n\n    const [id, setId] = useState('');\n    const [randomNumbers, setRandomNumbers] = useState('');\n    const [firstResponseReceived , setFirstResponseReceived] = useState(false)\n  useEffect(() => {\n\n    const socket = new WebSocket('ws://localhost:3000');\n\n    // Event listener for when the connection is established\n    socket.addEventListener('open', (event) => {\n      console.log('WebSocket connection opened:', event);\n\n    });\n\n    // Event listener for incoming messages\n    socket.addEventListener('message', (event) => {\n      const data = JSON.parse(event.data);\n        console.log(data)\n        // Perform your action when the first response is received\n        if (!firstResponseReceived) {\n            console.log('First response received taking in the id ');\n            setId(data.id);\n            setFirstResponseReceived(true);\n          }\n        \n        setRandomNumbers(data.value)\n\n    });\n\n    // Event listener for when the connection is closed\n    socket.addEventListener('close', (event) => {\n      console.log('WebSocket connection closed:', event);\n    });\n\n    // Cleanup function to close the socket when the component is unmounted\n    return () => {\n      socket.close();\n    };\n  }, []); // Empty dependency array ensures this effect runs only once on mount\n\n  return (\n    <div>\n        <h5>{`${id}`}</h5>\n        <h2>{`${randomNumbers}`}</h2>\n    </div>\n  );\n};\n\nexport default WebSocketComponent;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAG7B,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChC,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,qBAAqB,EAAGC,wBAAwB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC5EC,SAAS,CAAC,MAAM;IAEd,MAAMW,MAAM,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;;IAEnD;IACAD,MAAM,CAACE,gBAAgB,CAAC,MAAM,EAAGC,KAAK,IAAK;MACzCC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,KAAK,CAAC;IAEpD,CAAC,CAAC;;IAEF;IACAH,MAAM,CAACE,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAK;MAC5C,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,KAAK,CAACG,IAAI,CAAC;MACjCF,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;MACjB;MACA,IAAI,CAACR,qBAAqB,EAAE;QACxBM,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;QACxDV,KAAK,CAACW,IAAI,CAACZ,EAAE,CAAC;QACdK,wBAAwB,CAAC,IAAI,CAAC;MAChC;MAEFF,gBAAgB,CAACS,IAAI,CAACG,KAAK,CAAC;IAEhC,CAAC,CAAC;;IAEF;IACAT,MAAM,CAACE,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAK;MAC1CC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,KAAK,CAAC;IACpD,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXH,MAAM,CAACU,KAAK,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEnB,OAAA;IAAAoB,QAAA,gBACIpB,OAAA;MAAAoB,QAAA,EAAM,GAAEjB,EAAG;IAAC;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClBxB,OAAA;MAAAoB,QAAA,EAAM,GAAEf,aAAc;IAAC;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV,CAAC;AAACtB,EAAA,CAhDID,kBAAkB;AAAAwB,EAAA,GAAlBxB,kBAAkB;AAkDxB,eAAeA,kBAAkB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}